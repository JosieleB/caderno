{
  "hash": "2a60f10746a969918c1610ec1ee02484",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gráficos\"\n---\n\n\n\n\n### Construindo gráficos e filtrando dados\n\nPacotes que ainda não foram usados neste site e precisam ser instalados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"janitor\")\ninstall.packages(\"patchwork\")\n```\n:::\n\n\n\n\n#### Exemplo 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carrega os pacotes necessários\nlibrary(gsheet)    # Para importar dados diretamente do Google Sheets\nlibrary(dplyr)     # Para manipulação de dados (filtrar, agrupar, etc.)\nlibrary(ggplot2)   # Para criar gráficos\nlibrary(janitor)   # Para limpeza de dados e funções úteis, como tabyl()\n\n# Importa os dados de uma planilha do Google Sheets\nsurvey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\n\n# Visualiza os dados importados\nView(survey)\n\n# Exemplo de agrupamento e contagem usando 'group_by()' e 'count()':\nsurvey |> \n  group_by(state, residue) |>  # Agrupa os dados pelas colunas 'state' (estado) e 'residue' (resíduo)\n  count()  # Conta o número de ocorrências em cada grupo\n\n# Filtra os dados para o estado \"RS\" (Rio Grande do Sul)\nRS <- survey |> \n  filter(state == \"RS\")\nView(RS)  # Exibe os dados filtrados para o estado \"RS\"\n\n# Filtra os dados para o estado \"PR\" (Paraná)\nPR <- survey |> \n  filter(state == \"PR\")\nView(PR)  # Exibe os dados filtrados para o estado \"PR\"\n\n# Combina os dados de \"RS\" e \"PR\" em um único data frame usando 'rbind()'\ncombinado <- rbind(RS, PR)\n\n# Seleciona apenas as colunas 'year', 'state' e 'species' para análise\nsurvey_b <- survey |>\n  select(year, state, species)  # Retorna apenas as colunas de interesse\n\nView(survey_b)  # Exibe o data frame 'survey_b'\n\n# Usando a função 'tabyl()' do pacote 'janitor' para criar uma tabela cruzada \nsurvey_b |> \n  tabyl(year, species)  # Contagem de ocorrências para cada combinação de 'year' (ano) e 'species' (espécie)\n\n# Agrupa os dados por 'year' (ano) e 'species' (espécie), e conta as ocorrências de cada grupo\nsurvey_b |> \n  group_by(year, species) |>\n  count() |>  # Conta o número de ocorrências por grupo\n\n# Cria um gráfico com 'ggplot2'\nggplot(aes(year, n, fill = species, color = species)) + \n  geom_col() +  # Cria um gráfico de barras (geom_col) para representar a contagem\n  scale_colour_viridis_d()  # Aplica a paleta de cores 'viridis' para as espécies\n```\n\n::: {.cell-output-display}\n![](graficos_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n*A função **`filter()`** permite extrair dados específicos para uma análise mais focada.*\n\n*A função **`select()`** é usada para escolher apenas as colunas desejadas do data frame.*\n\n*A função **`rbind()`** é usada para combinar dois data frames (ou mais) com a mesma estrutura de colunas, empilhando-os um em cima do outro.*\n\n*O **`aes()`** mapeia as variáveis de seu data frame para os atributos estéticos do gráfico. No caso de um gráfico de barras, por exemplo, isso pode resultar em barras de diferentes cores para cada espécie, com a altura das barras representando a variável n e o eixo X sendo preenchido pela variável year.*\n\n*As barras ou pontos terão um preenchimento de cor diferente dependendo da espécie (com `fill` = species).A borda das barras ou pontos também será colorida com base na espécie (com `color` = species).*\n\n#### Exemplo 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmg2 <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137\")\n\n# Carrega o pacote ggthemes, que oferece temas adicionais e paletas de cores para personalizar gráficos\nlibrary(ggthemes)\n\n# Criar o gráfico\nplot_mg <- mg2 |>\n  ggplot(aes(trat, comp)) +  # Define o gráfico base, com 'trat' no eixo X e 'comp' no eixo Y\n  geom_boxplot(fill = \"#056646\", outlier.colour = NA) +  # Adiciona o boxplot com a cor de preenchimento definida\n  # Os outliers são escondidos (outlier.colour = NA)\n  geom_jitter(width = 0.1, color = \"gray20\") +  # Adiciona pontos dispersos sobre o boxplot para mostrar a distribuição dos dados\n  # O parâmetro 'width = 0.1' aplica um pequeno deslocamento horizontal para evitar sobreposição dos pontos\n  # A cor dos pontos é definida como cinza escuro (gray20)\n   theme_economist()\nplot_mg\n```\n\n::: {.cell-output-display}\n![](graficos_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#você pode salvar seus gráfiso no formato que quiser. \nggsave(\"box.tiff\", bg = \"white\", width = 5, height = 4) #também aceita em PNG\n```\n:::\n\n\n\n\n*A função **`geom_boxplot()`** é usada para criar um gráfico com boxplot.*\n\n*A função `geom_jitter()` é usada para adicionar pontos dispersos ao gráfico, geralmente com um pequeno deslocamento horizontal (ou vertical) para evitar sobreposição de pontos.*\n\n***`\"box.tiff\"`**: Este é o nome do arquivo de saída. O gráfico será salvo com o nome `box.tiff` e o formato de imagem será determinado pela extensão do nome do arquivo (no caso, `.tiff`), o que significa que o arquivo será salvo como um arquivo TIFF.*\n\n**`bg`**: *Este parâmetro especifica a cor de fundo do gráfico gerado no arquivo, neste caso branco. Isso é útil quando você quer garantir que a imagem tenha um fundo branco, mesmo que o gráfico tenha sido criado com um fundo diferente (como `theme_bw()` ou `theme_minimal()`).*\n\n*`width`: Este parâmetro define a largura do arquivo de imagem que será salvo.*\n\n*`height`: Este parâmetro define a altura do arquivo de imagem que será salvo.*\n\nVocê pode conferir diferentes temas que estão inseridos no pacote `ggthemes` em: <https://r-graph-gallery.com/ggplot2-package.html#theme-widget>\n\n#### Exemplo 3\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicelial <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=959387827#gid=959387827\")\n\nplot_micelial <- micelial |> \n  ggplot(aes(reorder(especie, tcm), tcm)) +  # Reordena as categorias de 'especie' com base na variável 'tcm' (Taxa de Crescimento Micelial)\n  \n  # Adiciona um boxplot para mostrar a distribuição dos dados, mas oculta os outliers\n  geom_boxplot(outlier.colour = NA) +  # 'outlier.colour = NA' impede que os outliers sejam mostrados\n  \n  # Adiciona pontos dispersos (jitter) para mostrar a distribuição individual dos dados\n  geom_jitter(width = 0.1, color = \"gray20\") +  # 'width = 0.1' adiciona um pequeno deslocamento horizontal aos pontos\n\n  # Aplica o tema 'grey' do ggplot2, que é um tema mais simples e claro\n  theme_grey() +  # 'theme_grey()' aplica um tema de fundo cinza e um estilo básico\n\n  # Inverte as coordenadas para ter as categorias no eixo Y e a variável 'tcm' no eixo X\n  coord_flip() +  # 'coord_flip()' inverte os eixos X e Y para melhor visualização\n  \n  # Define o rótulo para o eixo Y\n  labs(x = \"\",  # O rótulo do eixo X será vazio\n       y = \"Taxa de crescimento micelial (mm/dia)\")  # O rótulo do eixo Y descreve o que a variável 'tcm' representa\n\n# Exibe o gráfico criado\nprint(plot_micelial)  # Exibe o gráfico no RStudio ou em RMarkdown\n```\n\n::: {.cell-output-display}\n![](graficos_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Você pode salvar os dois gráficos como uma única imagem\n\n*Você pode usar o pacote `patchwork` para combinar os gráficos do exemplo 2 e 3.*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n#plot_mg + plot_micelial\n#plot_mg / plot_micelial #plota um em cima do outro\n(plot_mg | plot_micelial)+\n  plot_annotation(tag_levels= \"A\")\n```\n\n::: {.cell-output-display}\n![](graficos_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(\"combo.tiff\", bg = \"white\", width = 8, height = 4)\n```\n:::\n\n\n\n\n*Atenção: as imagens serão salvas no diretório onde está salvo seu projeto.*\n\n> *Você pode conhecer mais e achar novas inpirações e funções do pacote ggplot em: <https://r-graph-gallery.com/ggplot2-package.html>*\n",
    "supporting": [
      "graficos_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}