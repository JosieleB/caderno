report(m3)
# Estimando médias ajustadas e destransformando os resultados
m33 <- emmeans(m3, ~ spray, type = "response")  # Desfazendo a transformação
plot(m33)
cld(m33)  # Comparações de médias ajustadas entre os grupos
# Teste de Kruskal-Wallis para comparar os grupos
kruskal.test(count ~ spray, data = insetos)
# Utilizando o pacote agricolae para comparações pós-hoc entre os grupos
library(agricolae)
kruskal(insetos$count, insetos$spray, group = TRUE, console = TRUE)
# Ajustando um modelo de Poisson para dados de contagem
m2.3 <- glm(count ~ spray, data = insetos, family = poisson)
# Exibindo a ANOVA para o modelo de Poisson
anova(m2.3)
# Usando o pacote car para uma ANOVA mais detalhada
library(car)
Anova(m2.3)
# Verificando os resíduos do modelo de Poisson
plot(simulateResiduals(m2.3))
library(DHARMa)
# Ajustando um modelo de Poisson para dados de contagem
m2.3 <- glm(count ~ spray, data = insetos, family = poisson)
# Exibindo a ANOVA para o modelo de Poisson
anova(m2.3)
# Usando o pacote car para uma ANOVA mais detalhada
library(car)
Anova(m2.3)
# Verificando os resíduos do modelo de Poisson
plot(simulateResiduals(m2.3))
# Estimativas de médias ajustadas para o modelo de Poisson
medias_m2.3 <- emmeans(m2.3, ~ spray, type = "response")
medias_m2.3
cld(medias_m2.3)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
options(repos = c(CRAN = "https://cran.rstudio.com/"))
options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Aplicando o Box-Cox para encontrar o melhor valor de lambda
boxcox(lm(insects$count+0.1 ~1))  # Adicionando 0.1 para garantir que os valores são positivos
# Aplicando o Box-Cox para encontrar o melhor valor de lambda
boxcox(lm(insetos$count+0.1 ~1))  # Adicionando 0.1 para garantir que os valores são positivos
b <- boxcox(lm(insetos$count+0.1 ~1))
# Encontrando o valor de lambda que maximiza a função de verossimilhança
lambda <- b$x[which.max(b$y)]
lambda
# Transformando os dados com o valor de lambda obtido
library(tidyverse)
insects <- insetos |>
mutate(count2 = (count^lambda - 1)/lambda) |>
mutate(count3 = (sqrt(count)))
# Visualizando o histograma da variável transformada
hist(insetos$count2)
# Aplicando o Box-Cox para encontrar o melhor valor de lambda
boxcox(lm(insetos$count+0.1 ~1))  # Adicionando 0.1 para garantir que os valores são positivos
b <- boxcox(lm(insetos$count+0.1 ~1))
# Encontrando o valor de lambda que maximiza a função de verossimilhança
lambda <- b$x[which.max(b$y)]
lambda
# Transformando os dados com o valor de lambda obtido
library(tidyverse)
insetos <- insetos |>
mutate(count2 = (count^lambda - 1)/lambda) |>
mutate(count3 = (sqrt(count)))
# Visualizando o histograma da variável transformada
hist(insetos$count2)
library(readxl)
estande <-  gsheet2tbl ("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555")
library(readxl)
library(gsheet)
estande <-  gsheet2tbl ("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555")
# Visualizando a relação entre o tratamento e o número de plantas emergidas
library(ggplot2)
estande |>
ggplot(aes(trat, nplants)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ exp) +
theme_minimal() +
labs(x = "% de inóculo na semente", y = "Número de plantas")
exp1 <- estande |>
filter(exp == 1) |>
#group_by(trat) |>
#summarise(nplants2 = mean(nplants))
#exp1 |>
#ggplot(aes(trat, nplants2))+
#geom_point()+
#ylim(20,60)
m_exp1 <- lm(nplants ~ trat, data = exp1)
exp1 <- estande |>
filter(exp == 1) |>
#group_by(trat) |>
#summarise(nplants2 = mean(nplants))
m_exp1 <- lm(nplants ~ trat, data = exp1)
# Filtrando o primeiro experimento e ajustando o modelo de regressão
exp1 <- estande |>
filter(exp == 1)
# Ajustando o modelo de regressão linear para o primeiro experimento
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
# Analisando a média de plantas e o efeito do inóculo
# No intercepto, a média de plantas é 52 no estande, e a cada 1% de aumento do inóculo, o número de plantas diminui em -0.24
# Filtrando o segundo experimento e ajustando o modelo de regressão
exp2 <- estande |>
filter(exp == 2)
# Ajustando o modelo de regressão linear para o segundo experimento
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
# Filtrando o terceiro experimento e ajustando o modelo de regressão
exp3 <- estande |>
filter(exp == 3)
# Ajustando o modelo de regressão linear para o terceiro experimento
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
# Verificando os coeficientes dos modelos ajustados
m_exp1$coefficients  # Coeficientes para o primeiro experimento
m_exp2$coefficients  # Coeficientes para o segundo experimento
m_exp3$coefficients  # Coeficientes para o terceiro experimento
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Visualizando a relação entre dose e germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +
geom_line() +
facet_wrap(~ code)
# Ajustando um modelo não linear para FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43")
install.packages("drc")
library(drc) # Ajustando um modelo não linear aos dados
# Modelo de regressão não linear (W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajuste com o modelo LL.3
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# Avaliando o modelo com AIC
AIC(m43) # Quanto menor o AIC, melhor o modelo
plot(m43)
# Resumo do modelo ajustado
summary(m43)
# Estimando a EC50 (dose que leva a 50% de germinação)
ED(m43, 50)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
library((gsheet2tbl))
library(gsheet2tbl)
library(gsheet)
library(ggplot2)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Visualizando a relação entre dose e germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +
geom_line() +
facet_wrap(~ code)
library(gsheet)
library(ggplot2)
library(dplyr)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Visualizando a relação entre dose e germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +
geom_line() +
facet_wrap(~ code)
# Ajustando um modelo não linear para FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43")
install.packages("drc")
library(drc) # Ajustando um modelo não linear aos dados
# Modelo de regressão não linear (W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajuste com o modelo LL.3
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# Avaliando o modelo com AIC
AIC(m43) # Quanto menor o AIC, melhor o modelo
plot(m43)
# Resumo do modelo ajustado
summary(m43)
# Estimando a EC50 (dose que leva a 50% de germinação)
ED(m43, 50)
library(gsheet)
library(ggplot2)
library(dplyr)
library(emmeans)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Visualizando a relação entre dose e germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +
geom_line() +
facet_wrap(~ code)
# Ajustando um modelo não linear para FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43")
install.packages("drc")
library(drc) # Ajustando um modelo não linear aos dados
# Modelo de regressão não linear (W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajuste com o modelo LL.3
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# Avaliando o modelo com AIC
AIC(m43) # Quanto menor o AIC, melhor o modelo
plot(m43)
# Resumo do modelo ajustado
summary(m43)
# Estimando a EC50 (dose que leva a 50% de germinação)
ED(m43, 50)
k
# Carregando os dados de uma planilha do Google
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Agrupando os dados por código do fungo e dose e calculando a média de germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +  # Adiciona os pontos de dispersão
geom_line() +   # Adiciona linhas conectando os pontos
facet_wrap(~ code)  # Cria gráficos separados para cada código de fungo
# Filtrando os dados para o fungo FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43") # Filtra apenas o fungo "FGT43"
# Instalando o pacote 'drc' para ajuste de modelos não lineares
install.packages("drc")
library(drc)
# Ajustando o modelo de regressão não linear (modelo W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajustando o modelo LL.3 (modelo log-logístico)
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# Calculando o AIC para o modelo ajustado
AIC(m43)  # Quanto menor o AIC, melhor o modelo ajustado
# Plotando o gráfico do modelo ajustado
plot(m43)
# Resumo do modelo ajustado
summary(m43)
# Estimando a EC50, ou seja, a dose que leva a 50% de germinação
ED(m43, 50)  # Calcula a EC50
# Carregando os dados de uma planilha do Google
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
library(gsheet)
library(ggplot2)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Agrupando os dados por código do fungo e dose e calculando a média de germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +  # Adiciona os pontos de dispersão
geom_line() +   # Adiciona linhas conectando os pontos
facet_wrap(~ code)  # Cria gráficos separados para cada código de fungo
library(gsheet)
library(ggplot2)
library(dplyr)
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
# Agrupando os dados por código do fungo e dose e calculando a média de germinação
fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
ggplot(aes(dose, germination)) +
geom_point() +  # Adiciona os pontos de dispersão
geom_line() +   # Adiciona linhas conectando os pontos
facet_wrap(~ code)  # Cria gráficos separados para cada código de fungo
# Filtrando os dados para o fungo FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43") # Filtra apenas o fungo "FGT43"
# Instalando o pacote 'drc' para ajuste de modelos não lineares
install.packages("drc")
library(drc)
# Ajustando o modelo de regressão não linear (modelo W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajustando o modelo LL.3 (modelo log-logístico)
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
install.packages("drc")
# Filtrando os dados para o fungo FGT43
FGT43 <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination)) |>
filter(code == "FGT43") # Filtra apenas o fungo "FGT43"
# Instalando o pacote 'drc' para ajuste de modelos não lineares
library(drc)
# Ajustando o modelo de regressão não linear (modelo W2.3)
m43 <- drm(germination ~ dose, data = FGT43, fct = W2.3())
# Ajustando o modelo LL.3 (modelo log-logístico)
m43 <- drm(germination ~ dose, data = FGT43, fct = LL.3())
# Calculando o AIC para o modelo ajustado
AIC(m43)  # Quanto menor o AIC, melhor o modelo ajustado
# Plotando o gráfico do modelo ajustado
plot(m43)
# Resumo do modelo ajustado
summary(m43)
# Estimando a EC50, ou seja, a dose que leva a 50% de germinação
ED(m43, 50)  # Calcula a EC50
# Instalando o pacote 'ec50estimator'
install.packages("ec50estimator")
library(ec50estimator)
# Estimando a EC50 para todos os isolados
df_ec50 <- estimate_EC50(germination ~ dose,
data = fungi,
isolate_col = "code",  # Coluna que contém os isolados
strata_col = "state",  # Coluna que contém os estados dos isolados
interval = "delta",  # Intervalo de confiança para a estimativa
fct = drc::LL.3())  # Modelo LL.3 (modelo log-logístico)
# Instalando o pacote 'ec50estimator'
library(ec50estimator)
# Estimando a EC50 para todos os isolados
df_ec50 <- estimate_EC50(germination ~ dose,
data = fungi,
isolate_col = "code",  # Coluna que contém os isolados
strata_col = "state",  # Coluna que contém os estados dos isolados
interval = "delta",  # Intervalo de confiança para a estimativa
fct = drc::LL.3())  # Modelo LL.3 (modelo log-logístico)
# Visualizando as estimativas de EC50 para cada isolado
df_ec50 |>
ggplot(aes(reorder(ID, Estimate), Estimate)) +  # Reordena os isolados pelo valor estimado de EC50
geom_point() +
coord_flip() +  # Reverte os eixos para facilitar a visualização
labs(y = "EC50", x = "Isolados")
# Visualizando a distribuição das estimativas de EC50
df_ec50 |>
ggplot(aes(x = Estimate)) +
geom_histogram(bins = 5, color = "white")
class(estande$exp)
class(estande$exp)
# Filtrando o primeiro experimento e ajustando o modelo de regressão
exp1 <- estande |>
filter(round(exp) == 1)
# Ajustando o modelo de regressão linear para o primeiro experimento
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
# Analisando a média de plantas e o efeito do inóculo
# No intercepto, a média de plantas é 52 no estande, e a cada 1% de aumento do inóculo, o número de plantas diminui em -0.24
# Filtrando o segundo experimento e ajustando o modelo de regressão
exp2 <- estande |>
filter(round(exp) == 2)
# Ajustando o modelo de regressão linear para o segundo experimento
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
# Filtrando o terceiro experimento e ajustando o modelo de regressão
exp3 <- estande |>
filter(round(exp) == 3)
# Ajustando o modelo de regressão linear para o terceiro experimento
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
# Verificando os coeficientes dos modelos ajustados
m_exp1$coefficients  # Coeficientes para o primeiro experimento
m_exp2$coefficients  # Coeficientes para o segundo experimento
m_exp3$coefficients  # Coeficientes para o terceiro experimento
# Verificando a classe de 'exp'
class(estande$exp)
# Garantindo que 'exp' seja numérico antes de aplicar o 'round'
estande$exp <- as.numeric(estande$exp)
# Filtrando o primeiro experimento e ajustando o modelo de regressão
exp1 <- estande |>
filter(round(exp) == 1)
# Ajustando o modelo de regressão linear para o primeiro experimento
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
# Analisando a média de plantas e o efeito do inóculo
# No intercepto, a média de plantas é 52 no estande, e a cada 1% de aumento do inóculo, o número de plantas diminui em -0.24
# Filtrando o segundo experimento e ajustando o modelo de regressão
exp2 <- estande |>
filter(round(exp) == 2)
# Ajustando o modelo de regressão linear para o segundo experimento
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
# Filtrando o terceiro experimento e ajustando o modelo de regressão
exp3 <- estande |>
filter(round(exp) == 3)
# Ajustando o modelo de regressão linear para o terceiro experimento
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
# Verificando os coeficientes dos modelos ajustados
m_exp1$coefficients  # Coeficientes para o primeiro experimento
m_exp2$coefficients  # Coeficientes para o segundo experimento
m_exp3$coefficients  # Coeficientes para o terceiro experimento
# Verificando os valores únicos da coluna 'exp' para entender o que está acontecendo
unique(estande$exp)
# Convertendo a coluna 'exp' para numérica, se necessário
estande$exp <- as.numeric(as.character(estande$exp))
# Verificando se a conversão foi bem-sucedida
class(estande$exp)
# Remover valores NA ou não numéricos de 'exp', se houver
estande <- estande |>
filter(!is.na(exp) & !is.nan(exp))
# Agora aplicamos o filtro de round após garantir que 'exp' seja numérico
exp1 <- estande |>
filter(round(exp) == 1)
# Ajustando o modelo de regressão linear para o primeiro experimento
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
# Filtrando o segundo experimento e ajustando o modelo de regressão
exp2 <- estande |>
filter(round(exp) == 2)
# Ajustando o modelo de regressão linear para o segundo experimento
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
# Filtrando o terceiro experimento e ajustando o modelo de regressão
exp3 <- estande |>
filter(round(exp) == 3)
# Ajustando o modelo de regressão linear para o terceiro experimento
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
# Verificando os coeficientes dos modelos ajustados
m_exp1$coefficients  # Coeficientes para o primeiro experimento
m_exp2$coefficients  # Coeficientes para o segundo experimento
m_exp3$coefficients  # Coeficientes para o terceiro experimento
#Fazendo um modelo para cada experimento
exp1 <- estande |>
filter(exp == 1)
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
#No intercepto, a média de plantas é de 52 no estante, e a cada 1% de aumento do inóculo diminui em -0,24 o número de plantas no estande
#Segundo experimento
exp2 <- estande |>
filter(exp == 2)
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
#Terceiro experimento
exp3 <- estande |>
filter(exp == 3)
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
m_exp1$coefficients #Calculando o slop para o experimento
m_exp2$coefficients
m_exp3$coefficients
# Verificar os valores únicos da coluna 'exp'
unique(estande$exp)
# Garantir que a coluna 'exp' seja numérica
estande$exp <- as.numeric(as.character(estande$exp))
# Remover qualquer valor não numérico ou 'NA' da coluna 'exp'
estande <- estande |>
filter(!is.na(exp) & !is.nan(exp))
# Verificando a classe da coluna 'exp' após a conversão
class(estande$exp)
# Agora, ao invés de 'round', podemos usar a função 'filter' diretamente
# Filtrando o primeiro experimento
exp1 <- estande |>
filter(exp == 1)
# Ajustando o modelo de regressão linear para o primeiro experimento
m_exp1 <- lm(nplants ~ trat, data = exp1)
summary(m_exp1)
# Filtrando o segundo experimento e ajustando o modelo de regressão
exp2 <- estande |>
filter(exp == 2)
# Ajustando o modelo de regressão linear para o segundo experimento
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
# Filtrando o terceiro experimento e ajustando o modelo de regressão
exp3 <- estande |>
filter(exp == 3)
# Ajustando o modelo de regressão linear para o terceiro experimento
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
# Verificando os coeficientes dos modelos ajustados
m_exp1$coefficients  # Coeficientes para o primeiro experimento
m_exp2$coefficients  # Coeficientes para o segundo experimento
m_exp3$coefficients  # Coeficientes para o terceiro experimento
library(lme4)
# Ajustando o modelo misto
m_misto <- lmer(nplants ~ trat + (1  | exp/bloco),
data = estande)
# Intervalos de confiança para os efeitos aleatórios
confint(m_misto)
# Sumário do modelo ajustado
summary(m_misto)
# Realizando a ANOVA do modelo misto
library(car)
car::Anova(m_misto)
# O p-valor foi significativo
estande |>
ggplot(aes(trat, nplants, color = factor(exp))) +
geom_point() +  # Adiciona os pontos de dados
# geom_smooth(method = "lm", se = FALSE) +  # Linha de tendência (comentada)
geom_abline(intercept = 69.74, slope = -0.56, linewidth = 2) +  # Linha de interceptação
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed") +  # Linha para outra interceptação
geom_abline(intercept = 96, slope = -0.40, linetype = "dashed")    # Linha para outra interceptação
library(gsheet)
estande <-  gsheet2tbl ("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555")
library(lme4)
# Ajustando o modelo misto
m_misto <- lmer(nplants ~ trat + (1  | exp/bloco),
data = estande)
# Intervalos de confiança para os efeitos aleatórios
confint(m_misto)
# Sumário do modelo ajustado
summary(m_misto)
# Realizando a ANOVA do modelo misto
library(car)
car::Anova(m_misto)
# O p-valor foi significativo
library(ggplot2)
estande |>
ggplot(aes(trat, nplants, color = factor(exp))) +
geom_point() +  # Adiciona os pontos de dados
# geom_smooth(method = "lm", se = FALSE) +  # Linha de tendência (comentada)
geom_abline(intercept = 69.74, slope = -0.56, linewidth = 2) +  # Linha de interceptação
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed") +  # Linha para outra interceptação
geom_abline(intercept = 96, slope = -0.40, linetype = "dashed")    # Linha para outra interceptação
